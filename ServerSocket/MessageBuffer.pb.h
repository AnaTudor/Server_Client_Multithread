// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBuffer.proto

#ifndef PROTOBUF_MessageBuffer_2eproto__INCLUDED
#define PROTOBUF_MessageBuffer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_MessageBuffer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMessageBufferImpl();
void InitDefaultsMessageBuffer();
inline void InitDefaults() {
  InitDefaultsMessageBuffer();
}
}  // namespace protobuf_MessageBuffer_2eproto
class MessageBuffer;
class MessageBufferDefaultTypeInternal;
extern MessageBufferDefaultTypeInternal _MessageBuffer_default_instance_;

// ===================================================================

class MessageBuffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageBuffer) */ {
 public:
  MessageBuffer();
  virtual ~MessageBuffer();

  MessageBuffer(const MessageBuffer& from);

  inline MessageBuffer& operator=(const MessageBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageBuffer(MessageBuffer&& from) noexcept
    : MessageBuffer() {
    *this = ::std::move(from);
  }

  inline MessageBuffer& operator=(MessageBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBuffer* internal_default_instance() {
    return reinterpret_cast<const MessageBuffer*>(
               &_MessageBuffer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MessageBuffer* other);
  friend void swap(MessageBuffer& a, MessageBuffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageBuffer* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageBuffer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageBuffer& from);
  void MergeFrom(const MessageBuffer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageBuffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientIP = 1;
  bool has_clientip() const;
  void clear_clientip();
  static const int kClientIPFieldNumber = 1;
  const ::std::string& clientip() const;
  void set_clientip(const ::std::string& value);
  #if LANG_CXX11
  void set_clientip(::std::string&& value);
  #endif
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  ::std::string* mutable_clientip();
  ::std::string* release_clientip();
  void set_allocated_clientip(::std::string* clientip);

  // required string fileExtension = 2;
  bool has_fileextension() const;
  void clear_fileextension();
  static const int kFileExtensionFieldNumber = 2;
  const ::std::string& fileextension() const;
  void set_fileextension(const ::std::string& value);
  #if LANG_CXX11
  void set_fileextension(::std::string&& value);
  #endif
  void set_fileextension(const char* value);
  void set_fileextension(const char* value, size_t size);
  ::std::string* mutable_fileextension();
  ::std::string* release_fileextension();
  void set_allocated_fileextension(::std::string* fileextension);

  // optional string mainMessage = 3;
  bool has_mainmessage() const;
  void clear_mainmessage();
  static const int kMainMessageFieldNumber = 3;
  const ::std::string& mainmessage() const;
  void set_mainmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_mainmessage(::std::string&& value);
  #endif
  void set_mainmessage(const char* value);
  void set_mainmessage(const char* value, size_t size);
  ::std::string* mutable_mainmessage();
  ::std::string* release_mainmessage();
  void set_allocated_mainmessage(::std::string* mainmessage);

  // optional string plugin = 6;
  bool has_plugin() const;
  void clear_plugin();
  static const int kPluginFieldNumber = 6;
  const ::std::string& plugin() const;
  void set_plugin(const ::std::string& value);
  #if LANG_CXX11
  void set_plugin(::std::string&& value);
  #endif
  void set_plugin(const char* value);
  void set_plugin(const char* value, size_t size);
  ::std::string* mutable_plugin();
  ::std::string* release_plugin();
  void set_allocated_plugin(::std::string* plugin);

  // optional int32 infectStatus = 4;
  bool has_infectstatus() const;
  void clear_infectstatus();
  static const int kInfectStatusFieldNumber = 4;
  ::google::protobuf::int32 infectstatus() const;
  void set_infectstatus(::google::protobuf::int32 value);

  // optional int32 infectOffset = 5;
  bool has_infectoffset() const;
  void clear_infectoffset();
  static const int kInfectOffsetFieldNumber = 5;
  ::google::protobuf::int32 infectoffset() const;
  void set_infectoffset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MessageBuffer)
 private:
  void set_has_clientip();
  void clear_has_clientip();
  void set_has_fileextension();
  void clear_has_fileextension();
  void set_has_mainmessage();
  void clear_has_mainmessage();
  void set_has_infectstatus();
  void clear_has_infectstatus();
  void set_has_infectoffset();
  void clear_has_infectoffset();
  void set_has_plugin();
  void clear_has_plugin();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientip_;
  ::google::protobuf::internal::ArenaStringPtr fileextension_;
  ::google::protobuf::internal::ArenaStringPtr mainmessage_;
  ::google::protobuf::internal::ArenaStringPtr plugin_;
  ::google::protobuf::int32 infectstatus_;
  ::google::protobuf::int32 infectoffset_;
  friend struct ::protobuf_MessageBuffer_2eproto::TableStruct;
  friend void ::protobuf_MessageBuffer_2eproto::InitDefaultsMessageBufferImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageBuffer

// required string clientIP = 1;
inline bool MessageBuffer::has_clientip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageBuffer::set_has_clientip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageBuffer::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageBuffer::clear_clientip() {
  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientip();
}
inline const ::std::string& MessageBuffer::clientip() const {
  // @@protoc_insertion_point(field_get:MessageBuffer.clientIP)
  return clientip_.GetNoArena();
}
inline void MessageBuffer::set_clientip(const ::std::string& value) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBuffer.clientIP)
}
#if LANG_CXX11
inline void MessageBuffer::set_clientip(::std::string&& value) {
  set_has_clientip();
  clientip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageBuffer.clientIP)
}
#endif
inline void MessageBuffer::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBuffer.clientIP)
}
inline void MessageBuffer::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBuffer.clientIP)
}
inline ::std::string* MessageBuffer::mutable_clientip() {
  set_has_clientip();
  // @@protoc_insertion_point(field_mutable:MessageBuffer.clientIP)
  return clientip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBuffer::release_clientip() {
  // @@protoc_insertion_point(field_release:MessageBuffer.clientIP)
  clear_has_clientip();
  return clientip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBuffer::set_allocated_clientip(::std::string* clientip) {
  if (clientip != NULL) {
    set_has_clientip();
  } else {
    clear_has_clientip();
  }
  clientip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientip);
  // @@protoc_insertion_point(field_set_allocated:MessageBuffer.clientIP)
}

// required string fileExtension = 2;
inline bool MessageBuffer::has_fileextension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageBuffer::set_has_fileextension() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageBuffer::clear_has_fileextension() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageBuffer::clear_fileextension() {
  fileextension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileextension();
}
inline const ::std::string& MessageBuffer::fileextension() const {
  // @@protoc_insertion_point(field_get:MessageBuffer.fileExtension)
  return fileextension_.GetNoArena();
}
inline void MessageBuffer::set_fileextension(const ::std::string& value) {
  set_has_fileextension();
  fileextension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBuffer.fileExtension)
}
#if LANG_CXX11
inline void MessageBuffer::set_fileextension(::std::string&& value) {
  set_has_fileextension();
  fileextension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageBuffer.fileExtension)
}
#endif
inline void MessageBuffer::set_fileextension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileextension();
  fileextension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBuffer.fileExtension)
}
inline void MessageBuffer::set_fileextension(const char* value, size_t size) {
  set_has_fileextension();
  fileextension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBuffer.fileExtension)
}
inline ::std::string* MessageBuffer::mutable_fileextension() {
  set_has_fileextension();
  // @@protoc_insertion_point(field_mutable:MessageBuffer.fileExtension)
  return fileextension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBuffer::release_fileextension() {
  // @@protoc_insertion_point(field_release:MessageBuffer.fileExtension)
  clear_has_fileextension();
  return fileextension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBuffer::set_allocated_fileextension(::std::string* fileextension) {
  if (fileextension != NULL) {
    set_has_fileextension();
  } else {
    clear_has_fileextension();
  }
  fileextension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileextension);
  // @@protoc_insertion_point(field_set_allocated:MessageBuffer.fileExtension)
}

// optional string mainMessage = 3;
inline bool MessageBuffer::has_mainmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageBuffer::set_has_mainmessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageBuffer::clear_has_mainmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageBuffer::clear_mainmessage() {
  mainmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainmessage();
}
inline const ::std::string& MessageBuffer::mainmessage() const {
  // @@protoc_insertion_point(field_get:MessageBuffer.mainMessage)
  return mainmessage_.GetNoArena();
}
inline void MessageBuffer::set_mainmessage(const ::std::string& value) {
  set_has_mainmessage();
  mainmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBuffer.mainMessage)
}
#if LANG_CXX11
inline void MessageBuffer::set_mainmessage(::std::string&& value) {
  set_has_mainmessage();
  mainmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageBuffer.mainMessage)
}
#endif
inline void MessageBuffer::set_mainmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mainmessage();
  mainmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBuffer.mainMessage)
}
inline void MessageBuffer::set_mainmessage(const char* value, size_t size) {
  set_has_mainmessage();
  mainmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBuffer.mainMessage)
}
inline ::std::string* MessageBuffer::mutable_mainmessage() {
  set_has_mainmessage();
  // @@protoc_insertion_point(field_mutable:MessageBuffer.mainMessage)
  return mainmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBuffer::release_mainmessage() {
  // @@protoc_insertion_point(field_release:MessageBuffer.mainMessage)
  clear_has_mainmessage();
  return mainmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBuffer::set_allocated_mainmessage(::std::string* mainmessage) {
  if (mainmessage != NULL) {
    set_has_mainmessage();
  } else {
    clear_has_mainmessage();
  }
  mainmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainmessage);
  // @@protoc_insertion_point(field_set_allocated:MessageBuffer.mainMessage)
}

// optional int32 infectStatus = 4;
inline bool MessageBuffer::has_infectstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageBuffer::set_has_infectstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageBuffer::clear_has_infectstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageBuffer::clear_infectstatus() {
  infectstatus_ = 0;
  clear_has_infectstatus();
}
inline ::google::protobuf::int32 MessageBuffer::infectstatus() const {
  // @@protoc_insertion_point(field_get:MessageBuffer.infectStatus)
  return infectstatus_;
}
inline void MessageBuffer::set_infectstatus(::google::protobuf::int32 value) {
  set_has_infectstatus();
  infectstatus_ = value;
  // @@protoc_insertion_point(field_set:MessageBuffer.infectStatus)
}

// optional int32 infectOffset = 5;
inline bool MessageBuffer::has_infectoffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageBuffer::set_has_infectoffset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageBuffer::clear_has_infectoffset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageBuffer::clear_infectoffset() {
  infectoffset_ = 0;
  clear_has_infectoffset();
}
inline ::google::protobuf::int32 MessageBuffer::infectoffset() const {
  // @@protoc_insertion_point(field_get:MessageBuffer.infectOffset)
  return infectoffset_;
}
inline void MessageBuffer::set_infectoffset(::google::protobuf::int32 value) {
  set_has_infectoffset();
  infectoffset_ = value;
  // @@protoc_insertion_point(field_set:MessageBuffer.infectOffset)
}

// optional string plugin = 6;
inline bool MessageBuffer::has_plugin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageBuffer::set_has_plugin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageBuffer::clear_has_plugin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageBuffer::clear_plugin() {
  plugin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plugin();
}
inline const ::std::string& MessageBuffer::plugin() const {
  // @@protoc_insertion_point(field_get:MessageBuffer.plugin)
  return plugin_.GetNoArena();
}
inline void MessageBuffer::set_plugin(const ::std::string& value) {
  set_has_plugin();
  plugin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageBuffer.plugin)
}
#if LANG_CXX11
inline void MessageBuffer::set_plugin(::std::string&& value) {
  set_has_plugin();
  plugin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageBuffer.plugin)
}
#endif
inline void MessageBuffer::set_plugin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plugin();
  plugin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageBuffer.plugin)
}
inline void MessageBuffer::set_plugin(const char* value, size_t size) {
  set_has_plugin();
  plugin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageBuffer.plugin)
}
inline ::std::string* MessageBuffer::mutable_plugin() {
  set_has_plugin();
  // @@protoc_insertion_point(field_mutable:MessageBuffer.plugin)
  return plugin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageBuffer::release_plugin() {
  // @@protoc_insertion_point(field_release:MessageBuffer.plugin)
  clear_has_plugin();
  return plugin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageBuffer::set_allocated_plugin(::std::string* plugin) {
  if (plugin != NULL) {
    set_has_plugin();
  } else {
    clear_has_plugin();
  }
  plugin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin);
  // @@protoc_insertion_point(field_set_allocated:MessageBuffer.plugin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageBuffer_2eproto__INCLUDED
