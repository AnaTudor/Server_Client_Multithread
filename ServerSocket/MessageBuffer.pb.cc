// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageBuffer.proto

#include "MessageBuffer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class MessageBufferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageBuffer>
      _instance;
} _MessageBuffer_default_instance_;
namespace protobuf_MessageBuffer_2eproto {
void InitDefaultsMessageBufferImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_MessageBuffer_default_instance_;
    new (ptr) ::MessageBuffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageBuffer::InitAsDefaultInstance();
}

void InitDefaultsMessageBuffer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageBufferImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, clientip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, fileextension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, mainmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, infectstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, infectoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MessageBuffer, plugin_),
  0,
  1,
  2,
  4,
  5,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::MessageBuffer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MessageBuffer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "MessageBuffer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023MessageBuffer.proto\"\211\001\n\rMessageBuffer\022"
      "\020\n\010clientIP\030\001 \002(\t\022\025\n\rfileExtension\030\002 \002(\t"
      "\022\023\n\013mainMessage\030\003 \001(\t\022\024\n\014infectStatus\030\004 "
      "\001(\005\022\024\n\014infectOffset\030\005 \001(\005\022\016\n\006plugin\030\006 \001("
      "\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageBuffer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MessageBuffer_2eproto

// ===================================================================

void MessageBuffer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageBuffer::kClientIPFieldNumber;
const int MessageBuffer::kFileExtensionFieldNumber;
const int MessageBuffer::kMainMessageFieldNumber;
const int MessageBuffer::kInfectStatusFieldNumber;
const int MessageBuffer::kInfectOffsetFieldNumber;
const int MessageBuffer::kPluginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageBuffer::MessageBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_MessageBuffer_2eproto::InitDefaultsMessageBuffer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageBuffer)
}
MessageBuffer::MessageBuffer(const MessageBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientip()) {
    clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
  }
  fileextension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileextension()) {
    fileextension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileextension_);
  }
  mainmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mainmessage()) {
    mainmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainmessage_);
  }
  plugin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugin()) {
    plugin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_);
  }
  ::memcpy(&infectstatus_, &from.infectstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&infectoffset_) -
    reinterpret_cast<char*>(&infectstatus_)) + sizeof(infectoffset_));
  // @@protoc_insertion_point(copy_constructor:MessageBuffer)
}

void MessageBuffer::SharedCtor() {
  _cached_size_ = 0;
  clientip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileextension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&infectstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&infectoffset_) -
      reinterpret_cast<char*>(&infectstatus_)) + sizeof(infectoffset_));
}

MessageBuffer::~MessageBuffer() {
  // @@protoc_insertion_point(destructor:MessageBuffer)
  SharedDtor();
}

void MessageBuffer::SharedDtor() {
  clientip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileextension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBuffer::descriptor() {
  ::protobuf_MessageBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageBuffer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageBuffer& MessageBuffer::default_instance() {
  ::protobuf_MessageBuffer_2eproto::InitDefaultsMessageBuffer();
  return *internal_default_instance();
}

MessageBuffer* MessageBuffer::New(::google::protobuf::Arena* arena) const {
  MessageBuffer* n = new MessageBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!clientip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fileextension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fileextension_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!mainmessage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mainmessage_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!plugin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*plugin_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&infectstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&infectoffset_) -
        reinterpret_cast<char*>(&infectstatus_)) + sizeof(infectoffset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientIP = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientip().data(), static_cast<int>(this->clientip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageBuffer.clientIP");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fileExtension = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileextension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileextension().data(), static_cast<int>(this->fileextension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageBuffer.fileExtension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mainMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mainmessage().data(), static_cast<int>(this->mainmessage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageBuffer.mainMessage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 infectStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_infectstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infectstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 infectOffset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_infectoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infectoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plugin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin().data(), static_cast<int>(this->plugin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageBuffer.plugin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageBuffer)
  return false;
#undef DO_
}

void MessageBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientIP = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.clientIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientip(), output);
  }

  // required string fileExtension = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileextension().data(), static_cast<int>(this->fileextension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.fileExtension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fileextension(), output);
  }

  // optional string mainMessage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mainmessage().data(), static_cast<int>(this->mainmessage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.mainMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mainmessage(), output);
  }

  // optional int32 infectStatus = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->infectstatus(), output);
  }

  // optional int32 infectOffset = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->infectoffset(), output);
  }

  // optional string plugin = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin().data(), static_cast<int>(this->plugin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.plugin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->plugin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageBuffer)
}

::google::protobuf::uint8* MessageBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MessageBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientIP = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientip().data(), static_cast<int>(this->clientip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.clientIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientip(), target);
  }

  // required string fileExtension = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileextension().data(), static_cast<int>(this->fileextension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.fileExtension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fileextension(), target);
  }

  // optional string mainMessage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mainmessage().data(), static_cast<int>(this->mainmessage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.mainMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mainmessage(), target);
  }

  // optional int32 infectStatus = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->infectstatus(), target);
  }

  // optional int32 infectOffset = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->infectoffset(), target);
  }

  // optional string plugin = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin().data(), static_cast<int>(this->plugin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageBuffer.plugin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->plugin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageBuffer)
  return target;
}

size_t MessageBuffer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MessageBuffer)
  size_t total_size = 0;

  if (has_clientip()) {
    // required string clientIP = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());
  }

  if (has_fileextension()) {
    // required string fileExtension = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fileextension());
  }

  return total_size;
}
size_t MessageBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageBuffer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string clientIP = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientip());

    // required string fileExtension = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fileextension());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional string mainMessage = 3;
    if (has_mainmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainmessage());
    }

    // optional string plugin = 6;
    if (has_plugin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin());
    }

    // optional int32 infectStatus = 4;
    if (has_infectstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infectstatus());
    }

    // optional int32 infectOffset = 5;
    if (has_infectoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infectoffset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageBuffer)
    MergeFrom(*source);
  }
}

void MessageBuffer::MergeFrom(const MessageBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientip();
      clientip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fileextension();
      fileextension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileextension_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_mainmessage();
      mainmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainmessage_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_plugin();
      plugin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_);
    }
    if (cached_has_bits & 0x00000010u) {
      infectstatus_ = from.infectstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      infectoffset_ = from.infectoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBuffer::CopyFrom(const MessageBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MessageBuffer::Swap(MessageBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageBuffer::InternalSwap(MessageBuffer* other) {
  using std::swap;
  clientip_.Swap(&other->clientip_);
  fileextension_.Swap(&other->fileextension_);
  mainmessage_.Swap(&other->mainmessage_);
  plugin_.Swap(&other->plugin_);
  swap(infectstatus_, other->infectstatus_);
  swap(infectoffset_, other->infectoffset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageBuffer::GetMetadata() const {
  protobuf_MessageBuffer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MessageBuffer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
